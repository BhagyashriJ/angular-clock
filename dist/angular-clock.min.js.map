{"version":3,"sources":["angular-clock.min.js"],"names":["clock","$interval","restrict","scope","gmtOffset","template","link","element","attrs","stopTime","o","showSecs","undefined","showAmPm","showDigital","showAnalog","showGmtInfo","theme","gmtInfo","date","getDate","digital","analog","majors","Array","minors","tick","timeText","$watch","value","getGMTbase100","getGMTText","on","cancel","offset","parseFloat","f","Math","floor","ceil","s","round","lpad","rpad","substring","num","now","Date","utc","getTime","getTimezoneOffset","offsetNow","hrs","getHours","mins","getMinutes","secs","getSeconds","d","angular","module","directive","dateFilter"],"mappings":"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","file":"angular-clock.min.js","sourcesContent":["(function() {\r\n  'use strict';\r\n\r\n  /* <ds-widget-clock data-gmt-offset=\"0\"></ds-widget-clock> */\r\n  /*  var defaults = {\r\n    showSecs: false,\r\n    showAmPm: false,\r\n    gmtOffset: false,\r\n    showDigital: true,\r\n    showAnalog: true,\r\n    showGmtInfo: false,\r\n    theme:\"light\"\r\n  };*/\r\n  var days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n  var months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\r\n\r\n  angular.module('ds.clock', [])\r\n    .directive('dsWidgetClock', ['$interval', 'dateFilter',\r\n      function($interval, dateFilter) {\r\n        return clock($interval, dateFilter);\r\n      }\r\n    ]);\r\n\r\n  function clock($interval, dateFilter) {\r\n    return {\r\n      restrict: 'EA',\r\n      scope: {\r\n        gmtOffset: '=gmtOffset'\r\n      },\r\n      template: '<div class=\"widget-clock\" ng-class=\"theme\" ng-if=\"date\"><div class=\"digital\" ng-if=\"digital\"><span class=\"time\"><span class=\"hours\">{{digital}}</span></span></div><div class=\"analog\" ng-if=\"analog\"><div class=\"square\"><svg viewBox=\"0 0 100 100\"><g transform=\"translate(50,50)\"><circle class=\"clock-face\" r=\"48\" /><line ng-repeat=\"minor in minors track by $index\" class=\"minor\" y1=\"42\" y2=\"45\" ng-attr-transform=\"rotate({{360 * $index / minors.length}})\" /><line ng-repeat=\"major in majors track by $index\" class=\"major\" y1=\"35\" y2=\"46\" ng-attr-transform=\"rotate({{360 * $index / majors.length}})\" /><line class=\"hour\" y1=\"2\" y2=\"-20\" ng-attr-transform=\"rotate({{30 * date.hrs + date.mins / 2}})\" /><line class=\"minute\" y1=\"4\" y2=\"-30\" ng-attr-transform=\"rotate({{6 * date.mins + date.secs / 10}})\" /><g ng-attr-transform=\"rotate({{6 * date.secs}})\"><line class=\"second\" y1=\"10\" y2=\"-38\" /><line class=\"second-counterweight\" y1=\"10\" y2=\"2\" /></g></g></svg></div></div><div ng-if=\"gmtInfo\" class=\"gmt-info\">{{gmtInfo}}</div></div>',\r\n      link: function(scope, element, attrs) {\r\n        var format, // date format\r\n          stopTime; // so that we can cancel the time updates\r\n        var o = {}; //angular.copy(defaults)\r\n        var gmtOffset = scope.gmtOffset;\r\n        //o.gmtOffset = (gmtOffset !== undefined && gmtOffset !== null) ? parseFloat(gmtOffset) : false;\r\n        o.showSecs = attrs.showSecs !== undefined ? attrs.showSecs : true;\r\n        o.showAmPm = attrs.showAmPm !== undefined ? true : false;\r\n        o.showDigital = attrs.showDigital !== undefined ? true : false;\r\n        o.showAnalog = attrs.showAnalog !== undefined ? true : false;\r\n        o.showGmtInfo = attrs.showGmtInfo !== undefined ? true : false;\r\n        scope.theme = attrs.theme !== undefined ? attrs.theme : \"light\";\r\n        if (!o.showDigital && !o.showAnalog) {\r\n          o.showAnalog = true;\r\n          o.showDigital = true;\r\n        }\r\n        scope.gmtInfo = false;\r\n\r\n        scope.date = getDate(o);\r\n\r\n        scope.digital = o.showDigital ? 'Loading..' : false;\r\n        scope.analog = o.showAnalog;\r\n        scope.majors = new Array(12);\r\n        scope.minors = new Array(60);\r\n        var date = null;\r\n        var tick = function() {\r\n          date = getDate(o);\r\n          scope.date = date;\r\n          if (o.showDigital) {\r\n            scope.digital = timeText(date, o);\r\n          }\r\n        };\r\n\r\n        stopTime = $interval(tick, 1000);\r\n        // watch the expression, and update the UI on change.\r\n        scope.$watch('gmtOffset', function(value) {\r\n          gmtOffset = value;\r\n          o.gmtOffset = (gmtOffset !== undefined && gmtOffset !== null) ? getGMTbase100(gmtOffset) : false;\r\n          if (o.showGmtInfo && o.gmtOffset !== false) {\r\n            scope.gmtInfo = getGMTText(o.gmtOffset);\r\n          }\r\n          tick();\r\n        });\r\n        // listen on DOM destroy (removal) event, and cancel the next UI update\r\n        // to prevent updating time after the DOM element was removed.\r\n        element.on('$destroy', function() {\r\n          $interval.cancel(stopTime);\r\n          stopTime = null;\r\n        });\r\n\r\n      }\r\n    };\r\n  }\r\n\r\n  function getGMTbase100(offset) {\r\n    offset = parseFloat(offset);\r\n    var f = offset > 0 ? Math.floor(offset) : Math.ceil(offset),\r\n      s = (offset % 1) / 0.6;\r\n\r\n    return f + s;\r\n\r\n  }\r\n\r\n  function getGMTbase60(offset) {\r\n    var f = offset > 0 ? Math.floor(offset) : Math.ceil(offset),\r\n      s = ((offset > 0 ? offset : offset * -1) % 1) * 60;\r\n    return f + s;\r\n\r\n  }\r\n\r\n  function getGMTText(offset) {\r\n\r\n    var f = offset > 0 ? Math.floor(offset) : Math.ceil(offset),\r\n      s = Math.round(((offset > 0 ? offset : offset * -1) % 1) * 60);\r\n\r\n    return 'GMT' + (offset === 0 ? '' : ((offset > 0 ? ' +' : ' ') + lpad(f) + '.' + rpad(s).substring(0, 2)));\r\n\r\n  }\r\n\r\n  function lpad(num) {\r\n    if (num < 0) {\r\n      return (num > -10 ? '-0' : '-') + (num * -1);\r\n    } else {\r\n      return (num < 10 ? '0' : '') + num;\r\n    }\r\n\r\n  }\r\n\r\n  function rpad(num) {\r\n    return num + (num < 10 ? '0' : '');\r\n  }\r\n  // Checkfor offset and get correct time\r\n  function getDate(o) {\r\n    var now = new Date();\r\n    if (o.gmtOffset !== null && o.gmtOffset !== false) {\r\n      // Use GMT + gmtOffset\r\n      // convert to msec\r\n      // add local time zone offset\r\n      // get UTC time in msec\r\n      var utc = now.getTime() + (now.getTimezoneOffset() * 60000);\r\n      // create new Date object for different city\r\n      // using supplied offset\r\n      var offsetNow = new Date(utc + (3600000 * o.gmtOffset));\r\n      return {\r\n        hrs: offsetNow.getHours(),\r\n        mins: offsetNow.getMinutes(),\r\n        secs: offsetNow.getSeconds()\r\n      };\r\n    } else {\r\n      // Use local time\r\n      return {\r\n        hrs: now.getHours(),\r\n        mins: now.getMinutes(),\r\n        secs: now.getSeconds()\r\n      };\r\n    }\r\n  }\r\n\r\n  function timeText(d, o) {\r\n    return '' +\r\n      (o.showAmPm ? ((d.hrs % 12) === 0 ? 12 : (d.hrs % 12)) : d.hrs) + ':' +\r\n      lpad(d.mins) +\r\n      (o.showSecs ? ':' + lpad(d.secs) : '') +\r\n      (o.showAmPm ? (d.hrs < 12 ? ' AM' : ' PM') : '');\r\n  }\r\n\r\n})();\r\n"],"sourceRoot":"/source/"}